import asyncio
import io
import logging
from functools import wraps
from typing import Optional, List

import cv2
import numpy as np
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from tg.bot_config import BotConfig

class AdvancedTelegramBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self, config: BotConfig):
        self.config = config
        self.token = config.get('telegram.bot_token')
        self.application = Application.builder().token(self.token).build()
        self.current_image: Optional[np.ndarray] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self._setup_handlers()
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_level = getattr(logging, self.config.get('logging.level', 'INFO'))
        log_file = self.config.get('logging.file', 'bot.log')
        
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def require_access(self, admin_only: bool = False):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ"""
        def decorator(func):
            @wraps(func)
            async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
                user_id = update.effective_user.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø
                if not self.config.is_user_allowed(user_id):
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if admin_only and not self.config.is_admin(user_id):
                    await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                    return
                
                return await func(self, update, context)
            return wrapper
        return decorator
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        enabled_commands = self.config.get('commands.enabled', [])
        admin_commands = self.config.get('commands.admin_only', [])
        
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ —Å –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        commands = {
            'start': (self.start_command, False),
            'help': (self.help_command, False),
            'screenshot': (self.screenshot_command, False),
            'live': (self.live_command, False),
            'status': (self.status_command, True),
            'ping': (self.ping_command, False),
            'window': (self.window_command, True),
            'config': (self.config_command, True)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for cmd_name, (handler, default_admin) in commands.items():
            if cmd_name in enabled_commands:
                admin_only = cmd_name in admin_commands or default_admin
                decorated_handler = self.require_access(admin_only)(handler)
                self.application.add_handler(CommandHandler(cmd_name, decorated_handler))
    
    @require_access()
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        welcome_message = (
            f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/screenshot - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            "/live - —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            "/ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if self.config.is_admin(update.effective_user.id):
            welcome_message += (
                "\nüîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                "/window - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ\n"
                "/config - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            )
        
        await update.message.reply_text(welcome_message)
    
    @require_access()
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "üñºÔ∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:**\n"
            "/screenshot - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            "/live - —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å\n\n"
            "‚ÑπÔ∏è **–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/ping - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –±–æ—Ç–∞\n\n"
        )
        
        if self.config.is_admin(update.effective_user.id):
            help_message += (
                "üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "/status - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/window - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–º –æ–∫–Ω–µ\n"
                "/config - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
            )
        
        help_message += "üí° –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º!"
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    @require_access()
    async def screenshot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /screenshot"""
        try:
            if self.current_image is None:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º np.ndarray –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            image_bytes = self._convert_np_to_bytes(self.current_image)
            
            if image_bytes is None:
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await processing_msg.delete()
            await update.message.reply_photo(
                photo=image_bytes,
                caption="üì∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    @require_access()
    async def live_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ)"""
        await update.message.reply_text(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –∂–∏–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–º –±–æ—Ç–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ScreenshotBotService –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        )
    
    @require_access(admin_only=True)
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_message = (
            "üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n"
            f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
            f"üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç: {'–î–æ—Å—Ç—É–ø–µ–Ω' if self.current_image is not None else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: {len(self.application.bot_data)}\n"
            f"üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {len(self.application.handlers[0])}\n"
            f"‚öôÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if self.config.get('screenshot.auto_update') else '–í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        )
        
        if self.current_image is not None:
            h, w = self.current_image.shape[:2]
            status_message += f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {w}x{h}\n"
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    @require_access()
    async def ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
        await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
    
    @require_access(admin_only=True)
    async def window_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–º –æ–∫–Ω–µ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ)"""
        window_title = self.config.get('screenshot.window_title', '–ù–µ –∑–∞–¥–∞–Ω–æ')
        message = f"ü™ü –¶–µ–ª–µ–≤–æ–µ –æ–∫–Ω–æ: {window_title}\n‚ùì –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–º –±–æ—Ç–µ"
        await update.message.reply_text(message)
    
    @require_access(admin_only=True)
    async def config_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_info = (
            "‚öôÔ∏è **–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n\n"
            f"üéØ –¶–µ–ª–µ–≤–æ–µ –æ–∫–Ω–æ: `{self.config.get('screenshot.window_title')}`\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.config.get('screenshot.update_interval')}—Å\n"
            f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {self.config.get('screenshot.quality')}\n"
            f"ü§ñ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'–í–∫–ª' if self.config.get('screenshot.auto_update') else '–í—ã–∫–ª'}\n"
            f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {self.config.get('logging.level')}\n"
        )
        
        allowed_users = self.config.get('telegram.allowed_users', [])
        if allowed_users:
            config_info += f"üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(allowed_users)}\n"
        else:
            config_info += "üë• –î–æ—Å—Ç—É–ø: –æ—Ç–∫—Ä—ã—Ç—ã–π\n"
        
        await update.message.reply_text(config_info, parse_mode='Markdown')
    
    def _convert_np_to_bytes(self, image: np.ndarray) -> Optional[io.BytesIO]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç np.ndarray –≤ BytesIO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram"""
        try:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ BGR (OpenCV), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            if len(image.shape) == 3 and image.shape[2] == 3:
                image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            else:
                image_rgb = image
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            quality_settings = {
                'low': [cv2.IMWRITE_JPEG_QUALITY, 60],
                'medium': [cv2.IMWRITE_JPEG_QUALITY, 80],
                'high': [cv2.IMWRITE_PNG_COMPRESSION, 3]
            }
            
            quality = self.config.get('screenshot.quality', 'high')
            
            if quality == 'high':
                # PNG –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                success, encoded_image = cv2.imencode('.png', image_rgb, quality_settings['high'])
            else:
                # JPEG –¥–ª—è —Å–∂–∞—Ç–∏—è
                success, encoded_image = cv2.imencode('.jpg', image_rgb, quality_settings.get(quality, quality_settings['medium']))
            
            if not success:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None
            
            # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç
            image_bytes = io.BytesIO(encoded_image.tobytes())
            image_bytes.seek(0)
            
            return image_bytes
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def update_image(self, image: np.ndarray):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        self.current_image = image.copy()
        self.logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    def add_command_handler(self, command: str, handler_func, admin_only: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã"""
        decorated_handler = self.require_access(admin_only)(handler_func)
        self.application.add_handler(CommandHandler(command, decorated_handler))
        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: /{command}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Advanced Telegram –±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            await asyncio.Future()  # run forever
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    config = BotConfig()
    
    if config.get('telegram.bot_token') == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ bot_config.json –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à BOT_TOKEN")
        return
    
    bot = AdvancedTelegramBot(config)
    
    # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image = np.zeros((480, 640, 3), dtype=np.uint8)
    cv2.putText(test_image, "Advanced Bot Test", (50, 240), 
                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    bot.update_image(test_image)
    
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())