"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞ wincap
"""

import asyncio
import time
import threading
from typing import Optional

from devices.wincap import find_window_by_title, screenshot_window_np
from advanced_telegram_bot import AdvancedTelegramBot
from tg.bot_config import BotConfig

class IntegratedScreenshotBot(AdvancedTelegramBot):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —Å –∑–∞—Ö–≤–∞—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    
    def __init__(self, config: BotConfig):
        super().__init__(config)
        self.window_title = config.get('screenshot.window_title', 'Rogue Hearts')
        self.update_interval = config.get('screenshot.update_interval', 5.0)
        self.auto_update = config.get('screenshot.auto_update', True)
        
        self.hwnd: Optional[int] = None
        self.running = False
        self.screenshot_thread: Optional[threading.Thread] = None
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        self._override_commands()
    
    def _override_commands(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—Ö–≤–∞—Ç–æ–º —ç–∫—Ä–∞–Ω–∞"""
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ live –∫–æ–º–∞–Ω–¥—ã
        for handler_group in self.application.handlers.values():
            for handler in handler_group[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if hasattr(handler, 'callback') and hasattr(handler.callback, '__name__'):
                    if 'live_command' in handler.callback.__name__:
                        handler_group.remove(handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.add_command_handler("live", self.live_command_override, admin_only=False)
    
    async def live_command_override(self, update, context):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∏–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            if not self.hwnd:
                if not self._find_window():
                    await update.message.reply_text(f"‚ùå –û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∑–∞—Ö–≤–∞—Ç–∞
            processing_msg = await update.message.reply_text("üì∏ –î–µ–ª–∞—é –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            
            # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            frame = screenshot_window_np(self.hwnd, client_only=True)
            self.update_image(frame)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.delete()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            image_bytes = self._convert_np_to_bytes(frame)
            if image_bytes is None:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            
            await update.message.reply_photo(
                photo=image_bytes,
                caption="üì∏ –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
            )
            
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∂–∏–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∂–∏–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {str(e)}")
    
    async def window_command(self, update, context):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ"""
        try:
            window_found = self.hwnd is not None
            
            if not window_found:
                window_found = self._find_window()
            
            if window_found:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ
                try:
                    import win32gui
                    window_rect = win32gui.GetWindowRect(self.hwnd)
                    client_rect = win32gui.GetClientRect(self.hwnd)
                    
                    message = (
                        f"ü™ü **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ:**\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: `{self.window_title}`\n"
                        f"üîß HWND: `{self.hwnd}`\n"
                        f"üìê –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window_rect[2] - window_rect[0]}x{window_rect[3] - window_rect[1]}\n"
                        f"üì± –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: {client_rect[2]}x{client_rect[3]}\n"
                        f"üìç –ü–æ–∑–∏—Ü–∏—è: ({window_rect[0]}, {window_rect[1]})\n"
                        f"‚úÖ –°—Ç–∞—Ç—É—Å: –ù–∞–π–¥–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ"
                    )
                except Exception:
                    message = (
                        f"ü™ü **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ:**\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: `{self.window_title}`\n"
                        f"üîß HWND: `{self.hwnd}`\n"
                        f"‚úÖ –°—Ç–∞—Ç—É—Å: –ù–∞–π–¥–µ–Ω–æ"
                    )
            else:
                message = (
                    f"ü™ü **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫–Ω–µ:**\n\n"
                    f"üìù –¶–µ–ª–µ–≤–æ–µ –æ–∫–Ω–æ: `{self.window_title}`\n"
                    f"‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                    f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –≤–∏–¥–∏–º–æ"
                )
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫–Ω–µ: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def status_command(self, update, context):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Ö–≤–∞—Ç–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            window_status = "–ù–∞–π–¥–µ–Ω–æ" if self.hwnd else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            auto_update_status = "–í–∫–ª—é—á–µ–Ω–æ" if self.auto_update and self.running else "–í—ã–∫–ª—é—á–µ–Ω–æ"
            
            status_message = (
                f"üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n"
                f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
                f"üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç: {'–î–æ—Å—Ç—É–ø–µ–Ω' if self.current_image is not None else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
                f"ü™ü –¶–µ–ª–µ–≤–æ–µ –æ–∫–Ω–æ: {window_status}\n"
                f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {auto_update_status}\n"
                f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.update_interval}—Å\n"
                f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞: `{self.window_title}`\n"
            )
            
            if self.current_image is not None:
                h, w = self.current_image.shape[:2]
                status_message += f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {w}x{h}\n"
            
            if self.hwnd:
                status_message += f"üîß HWND: `{self.hwnd}`\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ
            thread_status = "–ê–∫—Ç–∏–≤–µ–Ω" if self.screenshot_thread and self.screenshot_thread.is_alive() else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            status_message += f"üßµ –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞: {thread_status}\n"
            
            await update.message.reply_text(status_message, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def _find_window(self) -> bool:
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            self.hwnd = find_window_by_title(self.window_title)
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: {self.window_title} (HWND: {self.hwnd})")
            return True
        except RuntimeError as e:
            self.logger.warning(f"–û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            self.hwnd = None
            return False
    
    def _screenshot_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        last_update = 0
        find_window_interval = 10.0  # –ò—â–µ–º –æ–∫–Ω–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        last_window_search = 0
        
        self.logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
        
        while self.running:
            try:
                current_time = time.time()
                
                # –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if not self.hwnd and (current_time - last_window_search) >= find_window_interval:
                    self._find_window()
                    last_window_search = current_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è
                if self.hwnd and (current_time - last_update) >= self.update_interval:
                    try:
                        frame = screenshot_window_np(self.hwnd, client_only=True)
                        self.update_image(frame)
                        last_update = current_time
                        self.logger.debug("–°–∫—Ä–∏–Ω—à–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                        # –í–æ–∑–º–æ–∂–Ω–æ –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º hwnd
                        self.hwnd = None
                
                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
            except Exception as e:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {e}")
                time.sleep(5)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        
        self.logger.info("–ü–æ—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start_screenshot_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        if not self.auto_update:
            self.logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        self.logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...")
        
        # –ò—â–µ–º –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._find_window()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self.running = True
        self.screenshot_thread = threading.Thread(target=self._screenshot_worker, daemon=True)
        self.screenshot_thread.start()
        
        self.logger.info("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_screenshot_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...")
        self.running = False
        
        if self.screenshot_thread and self.screenshot_thread.is_alive():
            self.screenshot_thread.join(timeout=5)
            if self.screenshot_thread.is_alive():
                self.logger.warning("–ü–æ—Ç–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è")
            else:
                self.logger.info("–ü–æ—Ç–æ–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram Screenshot –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.start_screenshot_service()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            await super().run()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            self.stop_screenshot_service()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def run_integrated_bot():
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    config = BotConfig()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    token = config.get('telegram.bot_token')
    if not token or token == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_bot.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = IntegratedScreenshotBot(config)
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üîö –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(run_integrated_bot())