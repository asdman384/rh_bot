import asyncio
import time

from threading import Thread
from typing import Optional

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from bot import BotRunner
from devices.device import Device
from devices.wincap import click_in_window, find_window_by_title, screenshot_window_np
from tg.bot_config import BotConfig
from tg.telegram_bot import TelegramBot


class GameBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –∑–∞—Ö–≤–∞—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""

    def __init__(
        self,
        bot_token: str,
        admin_users: list = None,
        window_title: str = "Rogue Hearts",
    ):
        self.bot = TelegramBot(bot_token, admin_users)
        self.window_title = window_title
        self.hwnd = None
        self.game_bot_thread = None
        # Selected boss name passed via /start_game_bot argument
        self._selected_boss: str | None = None
        self.bot_runner: BotRunner | None = None

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.add_command_handler("screenshot", self._screenshot_command)
        self.bot.add_command_handler("window", self._window_info_command)
        self.bot.add_command_handler("status", self.status_command)
        self.bot.add_command_handler("start_game", self._start_game)
        self.bot.add_command_handler("close_game", self._close_game)
        self.bot.add_command_handler("start_game_bot", self.start)
        self.bot.add_command_handler("stop_game_bot", self.stop)
        self.bot.add_command_handler("click", self.click)
        self.bot.add_command_handler("logs", self.logs_command)
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é Telegram
        self.bot.set_command_list(
            [
                ("screenshot", "üì∑"),
                ("window", "ü™ü"),
                ("start_game", "üó°Ô∏è"),
                ("click", "üñ±Ô∏è/click x y"),
                ("start_game_bot", "ü§ñ"),
                ("status", "üìä"),
                ("close_game", "‚ùå"),
                ("help", "‚ÑπÔ∏è"),
                ("ping", "üì∂"),
                ("stop_game_bot", "üõë(don't work)"),
                ("logs", "üìù"),
            ]
        )
        self.bot.welcome_message.append("/screenshot - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n")
        self.bot.welcome_message.append("/window - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ\n\n")
        self.bot.welcome_message.append("/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n")
        self.bot.welcome_message.append("/start_game - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n\n")
        self.bot.welcome_message.append("/close_game - –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É\n\n")
        self.bot.welcome_message.append("/start_game_bot - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç\n\n")
        self.bot.welcome_message.append(
            "/stop_game_bot - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç (don't work)\n\n"
        )
        self.bot.welcome_message.append("/click x y - –∫–ª–∏–∫–Ω—É—Ç—å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x,y)\n\n")
        self.bot.welcome_message.append(
            "/logs [N] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)\n\n"
        )

    async def click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /click x y"""
        x, y = 740, 500
        if len(context.args) == 2:
            try:
                x = int(context.args[0])
                y = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
                return

        if not self.hwnd:
            await update.message.reply_text("‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        click_in_window(self.hwnd, x, y, button="left", double=False)
        await update.message.reply_text(f"‚úÖ –ö–ª–∏–∫–Ω—É—Ç–æ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_message = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {self.game_bot_thread and self.game_bot_thread.is_alive()}\n"
            f"tg –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.bot.application.handlers[0])}"
            f"\nRuns per hour: {self.bot_runner.get_runs_per_hour() if self.bot_runner else 0:.2f}"
            f"\nTotal runs: {self.bot_runner.run if self.bot_runner else 0}"
            f"\nFailed runs: {self.bot_runner.failed_runs if self.bot_runner else 0}"
        )
        await update.message.reply_text(status_message)

    async def _start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if self._find_window():
            await update.message.reply_text(f"ü™ü '{self.window_title}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            # TODO: this blocks main thread
            Device.start_rogue_hearts_wsa()
            time.sleep(10)  # wait for the game to load

            if self._find_window():
                await update.message.reply_text(f"ü™ü '{self.window_title}' –∑–∞–ø—É—â–µ–Ω")
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{self.window_title}'"
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _close_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            device = Device("127.0.0.1", 58526)
            device.connect()
            device.force_stop_rogue_hearts()
            self.hwnd = None
            device.close()
            await self.stop()

            await update.message.reply_text(f"ü™ü –û–∫–Ω–æ '{self.window_title}' –∑–∞–∫—Ä—ã—Ç–æ")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _screenshot_command(self, update: Update, context):
        try:
            if not self.hwnd:
                await update.message.reply_text("‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            frame = screenshot_window_np(self.hwnd, client_only=True)
            await self.bot.send_screenshot(frame, update, context)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {str(e)}")

    async def _window_info_command(self, update: Update, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–º –æ–∫–Ω–µ"""
        try:
            self._find_window()
            if self.hwnd:
                message = f"ü™ü –û–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {self.window_title}\nHWND: {self.hwnd}"
            else:
                message = f"‚ùå –û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            await update.message.reply_text(message)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def _find_window(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            self.hwnd = find_window_by_title(self.window_title)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: {self.window_title} (HWND: {self.hwnd})")
            return True
        except RuntimeError as e:
            print(f"‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            self.hwnd = None
            return False

    def _game_bot_worker(self):
        if self._selected_boss is None:
            print("‚ùå –ë–æ—Å—Å –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω.")
            return

        try:
            self.bot_runner = BotRunner(self._selected_boss)
            self.bot_runner.go()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ game-–±–æ—Ç–∞: {e}")
            # C:\dev\python\game_bot_service.py:216: RuntimeWarning: coroutine 'TelegramBot.notify_admins' was never awaited
            time.sleep(1)
            asyncio.run(self.bot.notify_admins(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ game-–±–æ—Ç–∞: {e}"))

    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ (stdout/stderr). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é N=30."""
        try:
            n = 30
            if context.args and len(context.args) >= 1:
                try:
                    n = max(1, min(500, int(context.args[0])))
                except ValueError:
                    pass

            if self.bot_runner is None:
                await update.message.reply_text("Bot is not running")
                return

            _log_lines = self.bot_runner.last_logs_handler.get_last_logs()
            if not _log_lines:
                await update.message.reply_text("‚ÑπÔ∏è –õ–æ–≥ –ø—É—Å—Ç.")
                return

            lines = list(_log_lines)[-n:]
            text = "\n".join(lines).strip()
            # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if len(text) <= 4000:
                await update.message.reply_text(
                    f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(lines)} —Å—Ç—Ä–æ–∫:\n\n{text}"
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–∏–º —É—Å–µ—á—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                clipped = text[-3800:]
                await update.message.reply_text(
                    f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(lines)} —Å—Ç—Ä–æ–∫ (—É—Å–µ—á–µ–Ω–æ):\n\n‚Ä¶{clipped}"
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ç—Ä–æ–∫–∞–º –ª–æ–≥–∞
    def get_last_logs(self, n: int = 30) -> str:
        n = max(1, min(2000, int(n)))
        lines = list(self._log_lines)[-n:]
        return "\n".join(lines).strip()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞

        –û–∂–∏–¥–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–æ—Å—Å–∞: BossDain –∏–ª–∏ BossBhalor.
        –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤—è—Ç
        —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
        """
        # Parse boss argument
        boss_arg = None
        if context.args and len(context.args) >= 1:
            boss_arg = context.args[0]

        valid_bosses = {
            "dain",
            "bhalor",
            "khanel",
            "delingh",
            "elvira",
        }

        if not boss_arg or boss_arg not in valid_bosses:
            # Show reply keyboard with command shortcuts
            kb = ReplyKeyboardMarkup(
                [
                    ["/start_game_bot dain", "/start_game_bot bhalor"],
                    ["/start_game_bot khanel", "/start_game_bot delingh"],
                    ["/start_game_bot elvira"],
                ],
                resize_keyboard=True,
            )
            msg = "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            await update.message.reply_text(msg, reply_markup=kb)
            return

        # Store selected boss for worker usage (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        self._selected_boss = boss_arg

        # –î–∞–ª–µ–µ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
        if self.game_bot_thread and self.game_bot_thread.is_alive():
            print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω.")
            await update.message.reply_text(
                "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω."
            )
            return

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ game-–±–æ—Ç–∞...")

        # –ò—â–µ–º –æ–∫–Ω–æ
        self._find_window()
        if not self.hwnd:
            message = f"‚ùå –û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω."
            print(message)
            await update.message.reply_text(message)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.game_bot_thread = Thread(target=self._game_bot_worker, daemon=True)
        self.game_bot_thread.start()

        status_message = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {self.game_bot_thread and self.game_bot_thread.is_alive()}\n"
            f"tg –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.bot.application.handlers[0])}"
            f"\nRuns per hour: {self.bot_runner.get_runs_per_hour() if self.bot_runner else 0:.2f}"
            f"\nTotal runs: {self.bot_runner.run if self.bot_runner else 0}"
            f"\nFailed runs: {self.bot_runner.failed_runs if self.bot_runner else 0}"
        )
        await update.message.reply_text(status_message)

    async def stop(
        self,
        update: Optional[Update] = None,
        context: Optional[ContextTypes.DEFAULT_TYPE] = None,
    ):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ game-–±–æ—Ç–∞...")
        if self.game_bot_thread:
            # There is no safe way to forcibly kill a thread in Python.
            # You should implement a flag to signal the thread to exit gracefully.
            # For now, we just wait for it to finish (if possible).
            print("‚èπÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ game-–±–æ—Ç–∞...")
            # Optionally, set a flag here to signal the thread to stop if your worker supports it.
            self.game_bot_thread.join(timeout=5)
            self.bot_runner = None

        message = "‚èπÔ∏è –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        print(message)
        if update and context:
            await update.message.reply_text(message)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config = BotConfig()

    await GameBotService(
        config.get("telegram.bot_token"),
        config.get("telegram.admin_users", []),
        config.get("screenshot.window_title"),
    ).bot.run()


if __name__ == "__main__":
    asyncio.run(main())
