import asyncio
import time
from threading import Thread
from typing import Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes

from bot import start_game_bot
from devices.device import Device
from devices.wincap import click_in_window, find_window_by_title, screenshot_window_np
from tg.bot_config import BotConfig
from tg.telegram_bot import TelegramBot


class GameBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å –∑–∞—Ö–≤–∞—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""

    def __init__(
        self,
        bot_token: str,
        admin_users: list = None,
        window_title: str = "Rogue Hearts",
    ):
        self.bot = TelegramBot(bot_token, admin_users)
        self.window_title = window_title
        self.hwnd = None
        self.screenshot_thread = None

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.bot.add_command_handler("screenshot", self._screenshot_command)
        self.bot.add_command_handler("window", self._window_info_command)
        self.bot.add_command_handler("status", self.status_command)
        self.bot.add_command_handler("start_game", self._start_game)
        self.bot.add_command_handler("close_game", self._close_game)
        self.bot.add_command_handler("start_game_bot", self.start)
        self.bot.add_command_handler("stop_game_bot", self.stop)
        self.bot.add_command_handler("click", self.click)
        self.bot.welcome_message.append("/screenshot - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n")
        self.bot.welcome_message.append("/window - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫–Ω–µ\n\n")
        self.bot.welcome_message.append("/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n")
        self.bot.welcome_message.append("/start_game - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n\n")
        self.bot.welcome_message.append("/close_game - –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É\n\n")
        self.bot.welcome_message.append("/start_game_bot - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç\n\n")
        self.bot.welcome_message.append(
            "/stop_game_bot - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç (don't work)\n\n"
        )
        self.bot.welcome_message.append("/click x y - –∫–ª–∏–∫–Ω—É—Ç—å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x,y)\n\n")

    async def click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /click x y"""
        x, y = 740, 500
        if len(context.args) == 2:
            try:
                x = int(context.args[0])
                y = int(context.args[1])
            except ValueError:
                await update.message.reply_text("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
                return

        if not self.hwnd:
            await update.message.reply_text("‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        click_in_window(self.hwnd, x, y, button="left", double=False)
        await update.message.reply_text(f"‚úÖ –ö–ª–∏–∫–Ω—É—Ç–æ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_message = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {self.screenshot_thread and self.screenshot_thread.is_alive()}\n"
            f"tg –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.bot.application.handlers[0])}"
        )
        await update.message.reply_text(status_message)

    async def _start_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if self._find_window():
            await update.message.reply_text(f"ü™ü '{self.window_title}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            Device.start_rogue_hearts_wsa()
            time.sleep(10)  # wait for the game to load

            if self._find_window():
                await update.message.reply_text(f"ü™ü '{self.window_title}' –∑–∞–ø—É—â–µ–Ω")
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{self.window_title}'"
                )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _close_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            device = Device("127.0.0.1", 58526)
            device.connect()
            device.force_stop_rogue_hearts()
            self.hwnd = None
            device.close()
            await self.stop()

            await update.message.reply_text(f"ü™ü –û–∫–Ω–æ '{self.window_title}' –∑–∞–∫—Ä—ã—Ç–æ")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def _screenshot_command(self, update: Update, context):
        try:
            if not self.hwnd:
                await update.message.reply_text("‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            frame = screenshot_window_np(self.hwnd, client_only=True)
            await self.bot.send_screenshot(frame, update, context)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {str(e)}")

    async def _window_info_command(self, update: Update, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–º –æ–∫–Ω–µ"""
        try:
            self._find_window()
            if self.hwnd:
                message = f"ü™ü –û–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {self.window_title}\nHWND: {self.hwnd}"
            else:
                message = f"‚ùå –û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            await update.message.reply_text(message)

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def _find_window(self):
        """–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            self.hwnd = find_window_by_title(self.window_title)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: {self.window_title} (HWND: {self.hwnd})")
            return True
        except RuntimeError as e:
            print(f"‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            self.hwnd = None
            return False

    def _game_bot_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""

        try:
            start_game_bot()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ game-–±–æ—Ç–∞: {e}")
            # C:\dev\python\game_bot_service.py:216: RuntimeWarning: coroutine 'TelegramBot.notify_admins' was never awaited
            asyncio.run(self.bot.notify_admins(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ game-–±–æ—Ç–∞: {e}"))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.screenshot_thread and self.screenshot_thread.is_alive():
            print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω.")
            await update.message.reply_text(
                "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω."
            )
            return

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ game-–±–æ—Ç–∞...")

        # –ò—â–µ–º –æ–∫–Ω–æ
        self._find_window()
        if not self.hwnd:
            message = f"‚ùå –û–∫–Ω–æ '{self.window_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω."
            print(message)
            await update.message.reply_text(message)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.screenshot_thread = Thread(target=self._game_bot_worker, daemon=True)
        self.screenshot_thread.start()

        status_message = (
            "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {self.screenshot_thread and self.screenshot_thread.is_alive()}\n"
            f"tg –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.bot.application.handlers[0])}"
        )
        await update.message.reply_text(status_message)

    async def stop(
        self,
        update: Optional[Update] = None,
        context: Optional[ContextTypes.DEFAULT_TYPE] = None,
    ):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ game-–±–æ—Ç–∞...")
        if self.screenshot_thread:
            # There is no safe way to forcibly kill a thread in Python.
            # You should implement a flag to signal the thread to exit gracefully.
            # For now, we just wait for it to finish (if possible).
            print("‚èπÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ game-–±–æ—Ç–∞...")
            # Optionally, set a flag here to signal the thread to stop if your worker supports it.
            self.screenshot_thread.join(timeout=5)

        message = "‚èπÔ∏è –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        print(message)
        if update and context:
            await update.message.reply_text(message)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config = BotConfig()

    await GameBotService(
        config.get("telegram.bot_token"),
        config.get("telegram.admin_users", []),
        config.get("screenshot.window_title"),
    ).bot.run()


if __name__ == "__main__":
    asyncio.run(main())
